##############################################################################
# gamestate.py
##############################################################################
# Classes related to the game play state.
##############################################################################
# 12/12 Flembobs
##############################################################################

import pygame
from weakref import WeakKeyDictionary       
       
from engine.model import *
from engine.events import *
from engine.systemevents import *

##############################################################################
# GAME EVENTS
##############################################################################

class ManMoveRequest(Event):
   """
   Generated by the game event manager when the player is requested to move.
   """
   
   def __init__(self,move_by):
      """
      move_by - tuple of amount to move by (x_amount,y_amount)
      """
      self.move_by = move_by
      
##############################################################################
# GAME EVENTS - MANAGER AND LISTENER CLASSES
##############################################################################

class GameEventManager(EventManager):
   listeners = WeakKeyDictionary()

class GameEventListener(Listener):
   
   def __init__(self):
      Listener.__init__(self,GameEventManager)

##############################################################################
# GAME OBJECTS - MAN
##############################################################################

class Man(GameObject,GameEventListener):
   
   def __init__(self,pos):
      GameEventListener.__init__(self)

      self.pos = pos
      
   #--------------------------------------------------------------------------
          
   def render(self,surface):
      pygame.draw.rect(surface,(0,255,0),pygame.Rect(self.pos,(16,16)))
      
   #--------------------------------------------------------------------------
   
   def notify(self,event):
      
      if isinstance(event,ManMoveRequest):
         self.pos = (self.pos[0]+event.move_by[0],\
                     self.pos[1]+event.move_by[1])

##############################################################################
# GAME STATE CLASS
##############################################################################

class GameState(State,SystemEventListener):

   def __init__(self, model):
   
      SystemEventListener.__init__(self)
      State.__init__(self,model)
      
      self.screen_size = self.model.screen_size
      
      self.man = Man((240,240))
      self.game_objects.append(self.man)
      
   #--------------------------------------------------------------------------
   
   def notify(self,event):
      if isinstance(event,KeyboardEvent):
         if event.key == pygame.K_ESCAPE:
            SystemEventManager.post(QuitEvent()) 
            
      if isinstance(event,KeyboardEvent):
         if event.type == pygame.KEYDOWN:
            
            move_request = None
            
            if event.key == pygame.K_UP:
               move_request = ManMoveRequest((0,-16))
            if event.key == pygame.K_DOWN:
               move_request = ManMoveRequest((0,16))
            if event.key == pygame.K_RIGHT:
               move_request = ManMoveRequest((16,0))
            if event.key == pygame.K_LEFT:
               move_request = ManMoveRequest((-16,0))
               
            GameEventManager.post(move_request)
               
               
   